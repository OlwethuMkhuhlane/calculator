{"version":3,"sources":["components/Button.js","components/Input.js","components/ClearButton.js","App.js","serviceWorker.js","index.js"],"names":["Button","isOperator","val","isNaN","_this2","this","react_default","a","createElement","className","concat","props","children","onClick","handleClick","Component","Input","ClearButton","_this","handleClear","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addToInput","setState","input","state","addDecimal","indexOf","addZeroToInput","clearInput","add","previousNumber","operator","subtract","multiply","divide","evaluate","currentNumber","parseInt","id","src_components_Input","src_components_Button","src_components_ClearButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.622fb0e8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Button.css\";\n\nclass Button extends Component {\n  isOperator = val => {\n    return !isNaN(val) || val === \".\" || val === \"=\";\n  };\n\n  render() {\n    return( \n      <div \n        className={`button ${this.isOperator(this.props.children) ? \"\" : \"operator\"}`}\n        onClick={() => this.props.handleClick(this.props.children)}\n      >\n        {this.props.children}\n      </div>\n    )\n  }\n}\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport \"./Input.css\";\n\nclass Input extends Component {\n    render() {\n        return <div className = \"input\" > { this.props.children } </div>;\n    }\n}\nexport default Input;","import React, { Component } from \"react\";\nimport \"./ClearButton.css\";\n\nclass ClearButton extends Component {\n  render() {\n    return( \n      <div \n        className=\"clear-btn\"\n        onClick={() => this.props.handleClear()}\n      >\n        {this.props.children}\n      </div>\n    )\n  }\n}\n\nexport default ClearButton;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Button from \"./components/Button\";\nimport Input from \"./components/Input\";\nimport ClearButton from \"./components/ClearButton\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            input: \"\",\n            previousNumber: \"\",\n            currentNumber: \"\",\n            operator: \"\"\n        };\n    }\n\n    addToInput = val => {\n        this.setState({ input: this.state.input + val });\n    };\n\n    addDecimal = val => {\n        // only add decimal if there is no current decimal point present in the input area\n        if (this.state.input.indexOf(\".\") === -1) {\n            this.setState({ input: this.state.input + val });\n        }\n    };\n\n    addZeroToInput = val => {\n        // if this.state.input is not empty then add zero\n        if (this.state.input !== \"\") {\n            this.setState({ input: this.state.input + val });\n        }\n    };\n\n    clearInput = () => {\n        this.setState({ input: \"\" });\n    };\n\n    add = () => {\n        this.state.previousNumber = this.state.input;\n        this.setState({ input: \"\" });\n        this.state.operator = \"plus\";\n    };\n\n    subtract = () => {\n        this.state.previousNumber = this.state.input;\n        this.setState({ input: \"\" });\n        this.state.operator = \"subtract\";\n    };\n\n    multiply = () => {\n        this.state.previousNumber = this.state.input;\n        this.setState({ input: \"\" });\n        this.state.operator = \"multiply\";\n    };\n\n    divide = () => {\n        this.state.previousNumber = this.state.input;\n        this.setState({ input: \"\" });\n        this.state.operator = \"divide\";\n    };\n\n    evaluate = () => {\n        this.state.currentNumber = this.state.input;\n\n        if (this.state.operator == \"plus\") {\n            this.setState({\n                input: parseInt(this.state.previousNumber) +\n                    parseInt(this.state.currentNumber)\n            });\n        } else if (this.state.operator == \"subtract\") {\n            this.setState({\n                input: parseInt(this.state.previousNumber) -\n                    parseInt(this.state.currentNumber)\n            });\n        } else if (this.state.operator == \"multiply\") {\n            this.setState({\n                input: parseInt(this.state.previousNumber) *\n                    parseInt(this.state.currentNumber)\n            });\n        } else if (this.state.operator == \"divide\") {\n            this.setState({\n                input: parseInt(this.state.previousNumber) /\n                    parseInt(this.state.currentNumber)\n            });\n        }\n    };\n\n    render() {\n        return ( \n            <div>\n            <h2>Simple Calculator</h2>\n            <ul id=\"list\">\n                <li>make basic calculations</li>\n                <li>try out ll functionality</li>\n            </ul>\n            <div className = \"App\" >\n            <div id=\"header\">\n            \n            </div>\n            <\n            div className = \"calc-wrapper\" >\n            <\n            div className = \"row\" >\n            <\n            Input > { this.state.input } < /Input>{\" \"} < /\n            div > { \" \" } <\n            div className = \"row\" >\n            <\n            Button handleClick = { this.addToInput } > 1 < /Button>{\" \"} <\n            Button handleClick = { this.addToInput } > 2 < /Button>{\" \"} <\n            Button handleClick = { this.addToInput } > 3 < /Button>{\" \"} <\n            Button handleClick = { this.divide } > รท < /Button>{\" \"} < /\n            div > { \" \" } <\n            div className = \"row\" >\n            <\n            Button handleClick = { this.addToInput } > 4 < /Button>{\" \"} <\n            Button handleClick = { this.addToInput } > 5 < /Button>{\" \"} <\n            Button handleClick = { this.addToInput } > 6 < /Button>{\" \"} <\n            Button handleClick = { this.multiply } > * < /Button>{\" \"} < /\n            div > { \" \" } <\n            div className = \"row\" >\n            <\n            Button handleClick = { this.addToInput } > 7 < /Button>{\" \"} <\n            Button handleClick = { this.addToInput } > 8 < /Button>{\" \"} <\n            Button handleClick = { this.addToInput } > 9 < /Button>{\" \"} <\n            Button handleClick = { this.add } > + < /Button>{\" \"} < /\n            div > { \" \" } <\n            div className = \"row\" >\n            <\n            Button handleClick = { this.addDecimal } > 0 < /Button>{\" \"} <\n            Button handleClick = { this.addZeroToInput } > . < /Button>{\" \"} <\n            Button handleClick = { this.evaluate } > = < /Button>{\" \"} <\n            Button handleClick = { this.subtract } > - < /Button>{\" \"} <\n            ClearButton handleClear = { this.clearInput } > Clear < /ClearButton>{\" \"} < /\n            div > { \" \" } <\n            div className = \"row\" > { /* <ClearButton handleClear={this.clearInput}> Clear </ClearButton>{\" \"} */ } <\n            /div>{\" \"} < /\n            div > { \" \" } \n            </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}